
Version Clash Details

  This chapter gives you more details about our definition of version clashes.
  We define <<Inner Version Clashes>> and <<Outer Version Clashes>>

* Example 4: Multiple Version Clashes

[../../src/site/resources/images/multipleClash.png] Multi-Version Clash

  \
  The figure above shows the dependencies of the project <<<testproject:1.0>>>. In this project there are
  several versions of <<<com.google.guava:guava>>> distributed. Maven chooses - using its "nearest definition" -
  <<<com.google.guava:guava:13.0.1>>> (directly located in <<<testproject:1.0>>>) as the used version for the whole project.

  Following we show you its appearing
  Following dependencies in t
  Nachfolgend werden die Konsequenzen f√ºr die einzelnen Teilprojekte aufgezeigt.

  * <<<SAFE>>>: The referred dependency has the same version as the dependency which is used by Maven.

    * <<UNSAFE:>> The referred dependency has a lower version than the dependency which is used by Maven.

    * <<CRITICAL:>> The referred dependency has a higher version than the dependency which is used by Maven.

  Outer Version Clash:

  We define two kinds of version clashes in our Plugin.


  as the used version for the whole project

* Inner and Outer Version Clash

  We define two kinds of version clashes for our plugin <Inner Version Clashes> and <Outer Version Clashes>.
  The following figure illustrates the different version clash types.

[../../src/site/resources/images/Inner&OuterClashModel.png] Inner & Outer Clash Model

  If a project <<(groupId:artifactId)>> has a dependency on another project at least twice,
  a <Inner Version Clash> will be detected. There are three different types of <Inner Version Clashes>:

  * <<SAFE:>> The referred dependency has the same version as the dependency which is used by Maven.

  * <<UNSAFE:>> The referred dependency has a lower version than the dependency which is used by Maven.

  * <<CRITICAL:>> The referred dependency has a higher version than the dependency which is used by Maven.

  If there is at least one <<<UNSAFE>>> or <<<CRITICAL>>> <Inner Version Clash> in the project, we define a <Outer Version Clash> for the whole project.
  There are two different types of <Outer Version Clashes>:

  * <<UNSAFE>> At least one Inner Version Clash is <<<UNSAFE>>>.

  * <<CRITICAL>> At least one Inner Version Clash is <<<CRITICAL>>>.



* Ablage

  + Description

  Option 1: If a project has a dependency type <<(groupId:artifactId)>> at least twice - irrespective of their versions -
  a version clash appears for every associated dependency <<(groupId:artifactId:version)>>.

  Option 2: If a project <<(groupId:artifactId)>> has a dependency on another project at least twice,
  a version clash will be detected.

  Following the version clash types:

  //Typen vereinheitlichen fuer tree und list

  * deps:tree

      * <<SAFE VERSION CLASH:>> The referred dependency has the same version as the dependency which is used of Maven.

      * <<UNSAFE VERSION CLASH:>> The referred dependency has a lower version than the dependency which is used of Maven.

      * <<CRITICAL VERSION CLASH:>>  The referred dependency has a higher version than the dependency which is used of Maven.

  * deps:list

    * Inner Version Clash Type

      * <<SAFE:>> The referred dependency has the same version as the dependency which is used of Maven.

      * <<UNSAFE:>> The referred dependency has a lower version than the dependency which is used of Maven.

      * <<CRITICAL:>>  The referred dependency has a higher version than the dependency which is used of Maven.

    * Outter Version Clash Type

      * <<UNSAFE VERSION CLASH:>> At least one Inner Version Clash is <<<UNSAFE>>>.

      * <<CRITICAL VERSION CLASH:>> At least one Inner Version Clash is <<<CRITICAL>>>.